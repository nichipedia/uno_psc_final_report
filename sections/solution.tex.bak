\section{Solution}
For this project we developed a parallel framework to abstract out the individual statistical computation components from the parallel implementations. 
The problem we are trying to solve made developing this framework an excellent solution.
When training bathymetric prediction algorithms we do not know in-situ what the ideal features are for optimal prediction. 
Therefore, it is garunteed that we will have to iterate on our statistical computations regularly to improve results. 
Having computation components abstracted from the parallel implementation allows for rapid development and deployment of new statistical computations. 
This allows for more time to train prediction models and evaluate results.

\par
Our solution is comprised of three different implementations, one using OpenMP, one using MPI and one using Java and Java threads. 
It is our hypothesis that each programming paradigm will have strengths and weaknesses for different types of statistical computations. 
In order to find the most efficient use of resources we compared each implementation against a set of statistical computations to determine which performed best. 
We used a 30 second resolution bathymetry grid as our baseline input and used mean, standard deviation and plane fit for the statistical computations.

\par
To address memory consumption with high resolution datasets, we leveraged dynamic memory access. 
Instead of reading an entire grid of data into memory, each process dynamically accesses the memory it needs for computation. 
This approach allowed us to process larger data sets on machines with limited memory. 
When applicable we also leveraged buffered I/O. 
Using buffered I/O limits the amount of disk access when reading data dynamically. 
An example of this can be found in our java implementation. 
Here we used the BufferdReader, BufferedWriter, and FileChannel classes to handle all I/O performed by the computation threads.
